'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var effector = require('effector');
var jsxRuntime = require('react/jsx-runtime');

function removeNonUnit(shape) {
  return Object.keys(shape).reduce((acc, key) => {
    const value = shape[key];
    if (effector.is.unit(value)) {
      // @ts-expect-error
      acc[key] = value;
    }
    return acc;
  }, {});
}

function removeStorePrefix(shape) {
  return Object.keys(shape).reduce((acc, key) => {
    const unprefixedKey = key.replace(/^\$/, '');
    // @ts-expect-error
    acc[unprefixedKey] = shape[key];
    return acc;
  }, {});
}

const modelFactory = creator => {
  const ModelContext = /*#__PURE__*/react.createContext(null);
  const useModel = () => {
    const model = react.useContext(ModelContext);
    if (!model) {
      throw new Error('No model found');
    }
    return model;
  };
  const unitShape = () => {
    const model = useModel();
    const modelUnits = removeNonUnit(model);
    return removeStorePrefix(modelUnits);
  };
  return {
    /** Function that returns new `model` instance */
    createModel: creator,
    /** Hook that returns current `model` instance */
    useModel,
    /** `Provider` to pass current `model` instance into */
    Provider: ModelContext.Provider,
    '@@unitShape': unitShape
  };
};
/**
 * HOC that wraps your `View` into model `Provider`. Also adds `model` prop that will be passed into `Provider`
 * @param factory Factory that will be passed through Context
 * @param View Root component that will be wrapped into Context
 * @returns Wrapped component
 */
const modelView = (factory, View) => {
  const Render = props => {
    return /*#__PURE__*/jsxRuntime.jsx(factory.Provider, {
      value: props.model,
      children: /*#__PURE__*/jsxRuntime.jsx(View, {
        ...props
      })
    });
  };
  // `as` is used for a better "Go To Definition"
  return Render;
};

exports.modelFactory = modelFactory;
exports.modelView = modelView;
