import { EventCallable, Unit, UnitTargetable } from 'effector';
type NoInfer<T> = [T][T extends any ? 0 : never];
export declare function spread<Payload>(config: {
    targets: {
        [Key in keyof Payload]?: UnitTargetable<Payload[Key]>;
    };
}): EventCallable<Partial<Payload>>;
export declare function spread<Source, Payload extends Source extends Unit<infer S> ? S : never>(config: {
    source: Source;
    targets: {
        [Key in keyof Payload]?: EventCallable<Partial<Payload[Key]>> | UnitTargetable<NoInfer<Payload[Key]>>;
    };
}): Source;
export declare function spread<Payload>(targets: {
    [Key in keyof Payload]?: UnitTargetable<Payload[Key]>;
}): EventCallable<Partial<Payload>>;
export {};
