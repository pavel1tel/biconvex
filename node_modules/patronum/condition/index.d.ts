import { Effect, Event, Store, UnitTargetable, EventCallable } from 'effector';
type NoInfer<T> = T & {
    [K in keyof T]: T[K];
};
type EventAsReturnType<Payload> = any extends Payload ? Event<Payload> : never;
export declare function condition<State>(options: {
    source: Event<State>;
    if: ((payload: State) => boolean) | Store<boolean> | State;
    then: UnitTargetable<NoInfer<State> | void>;
    else: UnitTargetable<NoInfer<State> | void>;
}): EventAsReturnType<State>;
export declare function condition<State>(options: {
    source: Store<State>;
    if: ((payload: State) => boolean) | Store<boolean> | State;
    then: UnitTargetable<State | void>;
    else: UnitTargetable<State | void>;
}): Store<State>;
export declare function condition<Params, Done, Fail>(options: {
    source: Effect<Params, Done, Fail>;
    if: ((payload: Params) => boolean) | Store<boolean> | Params;
    then: UnitTargetable<NoInfer<Params> | void>;
    else: UnitTargetable<NoInfer<Params> | void>;
}): Effect<Params, Done, Fail>;
export declare function condition<State>(options: {
    source: Event<State>;
    if: ((payload: State) => boolean) | Store<boolean> | State;
    then: UnitTargetable<NoInfer<State> | void>;
}): EventAsReturnType<State>;
export declare function condition<State>(options: {
    source: Store<State>;
    if: ((payload: State) => boolean) | Store<boolean> | State;
    then: UnitTargetable<NoInfer<State> | void>;
}): Store<State>;
export declare function condition<Params, Done, Fail>(options: {
    source: Effect<Params, Done, Fail>;
    if: ((payload: Params) => boolean) | Store<boolean> | Params;
    then: UnitTargetable<NoInfer<Params> | void>;
}): Effect<Params, Done, Fail>;
export declare function condition<State>(options: {
    source: Event<State>;
    if: ((payload: State) => boolean) | Store<boolean> | State;
    else: UnitTargetable<NoInfer<State> | void>;
}): EventAsReturnType<State>;
export declare function condition<State>(options: {
    source: Store<State>;
    if: ((payload: State) => boolean) | Store<boolean> | State;
    else: UnitTargetable<NoInfer<State> | void>;
}): Store<State>;
export declare function condition<Params, Done, Fail>(options: {
    source: Effect<Params, Done, Fail>;
    if: ((payload: Params) => boolean) | Store<boolean> | Params;
    else: UnitTargetable<NoInfer<Params> | void>;
}): Effect<Params, Done, Fail>;
export declare function condition<State>(options: {
    if: ((payload: State) => boolean) | Store<boolean> | State;
    then: UnitTargetable<NoInfer<State> | void>;
    else: UnitTargetable<NoInfer<State> | void>;
}): EventCallable<State>;
export declare function condition<State>(options: {
    if: ((payload: State) => boolean) | Store<boolean> | State;
    then: UnitTargetable<NoInfer<State> | void>;
}): EventCallable<State>;
export declare function condition<State>(options: {
    if: ((payload: State) => boolean) | Store<boolean> | State;
    else: UnitTargetable<NoInfer<State> | void>;
}): EventCallable<State>;
export {};
