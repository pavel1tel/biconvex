{"version":3,"file":"index.cjs","sources":["../../src/query/adapter.ts","../../src/query/index.ts"],"sourcesContent":["import type { StorageAdapter } from '../types'\n\nexport type ChangeMethod = (\n  params: URLSearchParams | string,\n  erase?: boolean\n) => void\n\nexport type StateBehavior = 'keep' | 'erase'\n\nexport interface QueryConfig {\n  method?: ChangeMethod\n  state?: StateBehavior\n  serialize?: (value: any) => string\n  deserialize?: (value: string) => any\n  timeout?: number\n  def?: any\n}\n\nconst keyArea = Symbol() // eslint-disable-line symbol-description\n\nconst buffer = new Map<string, any>()\nlet timeoutId: ReturnType<typeof setTimeout> | undefined\nlet scheduled: number | undefined\n\n/*\n * Location change methods list\n */\n\nconst url = (params: URLSearchParams | string) =>\n  location.pathname +\n  (params + '' ? '?' + params : '') +\n  (location.hash && location.hash !== '#' ? location.hash : '')\n\nexport const pushState: ChangeMethod = (params, erase): void =>\n  history.pushState(erase ? null : history.state, '', url(params))\n\nexport const replaceState: ChangeMethod = (params, erase): void =>\n  history.replaceState(erase ? null : history.state, '', url(params))\n\nexport const locationAssign: ChangeMethod = (params): void =>\n  location.assign(url(params))\n\nexport const locationReplace: ChangeMethod = (params): void =>\n  location.replace(url(params))\n\n/**\n * Flush buffer to actual location search params\n */\nfunction flush(method: ChangeMethod, state?: StateBehavior) {\n  scheduled = undefined\n  if (buffer.size) {\n    const params = new URLSearchParams(location.search)\n    for (const [name, value] of buffer.entries()) {\n      if (value != null) {\n        params.set(name, `${value}`)\n      } else {\n        params.delete(name)\n      }\n    }\n    buffer.clear()\n    method(params, state === 'erase')\n  }\n}\n\n/**\n * Query string adapter factory\n */\nexport function adapter({\n  method = pushState,\n  state,\n  serialize,\n  deserialize,\n  def = null,\n  timeout,\n}: QueryConfig): StorageAdapter {\n  const adapter: StorageAdapter = <State>(\n    key: string,\n    update: (raw?: any) => void\n  ) => {\n    if (typeof addEventListener !== 'undefined') {\n      addEventListener('popstate', () => setTimeout(update, 0))\n    }\n\n    return {\n      get() {\n        const params = new URLSearchParams(location.search)\n        const value = params.get(key)\n        return value ? (deserialize ? deserialize(value) : value) : def\n      },\n\n      set(value: State) {\n        buffer.set(key, serialize ? serialize(value) : value)\n\n        if (timeout === undefined) {\n          clearTimeout(timeoutId)\n          return flush(method, state)\n        }\n\n        const deadline = Date.now() + timeout\n        if (scheduled === undefined || scheduled > deadline) {\n          clearTimeout(timeoutId)\n          scheduled = deadline\n          timeoutId = setTimeout(flush, timeout, method, state)\n        }\n      },\n    }\n  }\n\n  adapter.keyArea = keyArea\n  return adapter\n}\n","import type { Subscription } from 'effector'\nimport type {\n  ConfigPersist as BaseConfigPersist,\n  ConfigStore as BaseConfigStore,\n  ConfigSourceTarget as BaseConfigSourceTarget,\n  StorageAdapter,\n} from '../types'\nimport type { ChangeMethod, StateBehavior, QueryConfig } from './adapter'\nimport { persist as base } from '../core'\nimport { nil } from '../nil'\nimport { adapter } from './adapter'\n\nexport type {\n  Contract,\n  Done,\n  Fail,\n  Finally,\n  StorageAdapter,\n  StorageAdapterFactory,\n} from '../types'\nexport type { ChangeMethod, StateBehavior, QueryConfig } from './adapter'\nexport {\n  locationAssign,\n  locationReplace,\n  pushState,\n  replaceState,\n} from './adapter'\n\nexport interface ConfigPersist extends BaseConfigPersist {\n  method?: ChangeMethod\n  state?: StateBehavior\n  timeout?: number\n}\n\nexport interface ConfigStore<State, Err = Error>\n  extends QueryConfig,\n    BaseConfigStore<State, Err> {}\n\nexport interface ConfigSourceTarget<State, Err = Error>\n  extends QueryConfig,\n    BaseConfigSourceTarget<State, Err> {}\n\nexport interface Persist {\n  <State, Err = Error>(config: ConfigSourceTarget<State, Err>): Subscription\n  <State, Err = Error>(config: ConfigStore<State, Err>): Subscription\n}\n\n/**\n * Function, checking if `history` and `location` exists and accessible\n */\nfunction supports() {\n  return typeof history !== 'undefined' && typeof location !== 'undefined'\n}\n\n/**\n * Creates query string adapter\n */\nquery.factory = true as const\nexport function query(config?: QueryConfig): StorageAdapter {\n  return supports()\n    ? adapter({\n        ...config,\n      })\n    : nil({ keyArea: 'query' })\n}\n\n/**\n * Creates custom partially applied `persist`\n * with predefined `query` adapter\n */\nexport function createPersist(defaults?: ConfigPersist): Persist {\n  return (config) =>\n    base({\n      adapter: query,\n      ...defaults,\n      ...config,\n    })\n}\n\n/**\n * Default partially applied `persist`\n */\nexport const persist = createPersist()\n"],"names":["timeoutId","scheduled","keyArea","Symbol","buffer","Map","url","params","location","pathname","hash","pushState","erase","history","state","flush","method","undefined","size","URLSearchParams","search","name","value","entries","set","delete","clear","query","config","serialize","deserialize","def","timeout","adapter","key","update","addEventListener","setTimeout","get","clearTimeout","deadline","Date","now","nil","createPersist","defaults","base","factory","persist","assign","replace","replaceState"],"mappings":"iBAqBIA,EACAC,+DAJEC,EAAUC,SAEVC,EAAS,IAAIC,IAQbC,EAAOC,GACXC,SAASC,UACRF,EAAS,GAAK,IAAMA,EAAS,KAC7BC,SAASE,MAA0B,MAAlBF,SAASE,KAAeF,SAASE,KAAO,IAE/CC,EAA0BA,CAACJ,EAAQK,IAC9CC,QAAQF,UAAUC,EAAQ,KAAOC,QAAQC,MAAO,GAAIR,EAAIC,IAc1D,SAASQ,EAAMC,EAAsBF,GAEnC,GADAb,OAAYgB,EACRb,EAAOc,KAAM,CACf,IAAMX,EAAS,IAAIY,gBAAgBX,SAASY,QAC5C,IAAK,IAAOC,EAAMC,KAAUlB,EAAOmB,UACpB,MAATD,EACFf,EAAOiB,IAAIH,EAAO,GAAEC,KAEpBf,EAAOkB,OAAOJ,GAGlBjB,EAAOsB,QACPV,EAAOT,EAAkB,UAAVO,EACjB,CACF,CCJO,SAASa,EAAMC,GACpB,MAR0B,oBAAZf,SAA+C,oBAAbL,SDgB3C,UAAiBQ,OACtBA,EAASL,EAASG,MAClBA,EAAKe,UACLA,EAASC,YACTA,EAAWC,IACXA,EAAM,KAAIC,QACVA,IAEA,IAAMC,EAA0BA,CAC9BC,EACAC,KAEgC,oBAArBC,kBACTA,iBAAiB,YAAY,IAAMC,WAAWF,EAAQ,KAGjD,CACLG,GAAAA,GACE,IACMhB,EADS,IAAIH,gBAAgBX,SAASY,QACvBkB,IAAIJ,GACzB,OAAOZ,EAASQ,EAAcA,EAAYR,GAASA,EAASS,CAC7D,EAEDP,GAAAA,CAAIF,GAGF,GAFAlB,EAAOoB,IAAIU,EAAKL,EAAYA,EAAUP,GAASA,QAE/BL,IAAZe,EAEF,OADAO,aAAavC,GACNe,EAAMC,EAAQF,GAGvB,IAAM0B,EAAWC,KAAKC,MAAQV,QACZf,IAAdhB,GAA2BA,EAAYuC,KACzCD,aAAavC,GACbC,EAAYuC,EACZxC,EAAYqC,WAAWtB,EAAOiB,EAAShB,EAAQF,GAEnD,IAKJ,OADAmB,EAAQ/B,QAAUA,EACX+B,CACT,CClDMA,CAAQ,IACHL,IAELe,EAAAA,IAAI,CAAEzC,QAAS,SACrB,CAMO,SAAS0C,EAAcC,GAC5B,OAAQjB,GACNkB,EAAAA,QAAK,CACHb,QAASN,KACNkB,KACAjB,GAET,CApBAD,EAAMoB,SAAU,EAyBHC,IAAAA,EAAUJ,mDD3CsBrC,GAC3CC,SAASyC,OAAO3C,EAAIC,4BAEwBA,GAC5CC,SAAS0C,QAAQ5C,EAAIC,+EAPmB4C,CAAC5C,EAAQK,IACjDC,QAAQsC,aAAavC,EAAQ,KAAOC,QAAQC,MAAO,GAAIR,EAAIC"}