interface StorageAdapter {
    <State>(key: string, update: (raw?: any) => void): {
        get(raw?: any, ctx?: any): State | Promise<State | undefined> | undefined;
        set(value: State, ctx?: any): void;
    };
    keyArea?: any;
    noop?: boolean;
}

interface AsyncStorage {
    getItem: (key: string) => Promise<string | null>;
    setItem: (key: string, value: string) => Promise<void>;
}
interface AsyncStorageConfig {
    storage: () => AsyncStorage;
    serialize?: (value: any) => string;
    deserialize?: (value: string) => any;
}
declare function asyncStorage({ storage, serialize, deserialize, }: AsyncStorageConfig): StorageAdapter;
declare namespace asyncStorage {
    var factory: true;
}

export { type AsyncStorage, type AsyncStorageConfig, asyncStorage };
