/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.21.0
 * @flow
 */

// see https://gist.github.com/thecotne/6e5969f4aaf8f253985ed36b30ac9fe0
type $FlowGen$If<X: boolean, Then, Else = empty> = $Call<
  ((true, Then, Else) => Then) & ((false, Then, Else) => Else),
  X,
  Then,
  Else
>;

type $FlowGen$Assignable<A, B> = $Call<
  ((...r: [B]) => true) & ((...r: [A]) => false),
  A
>;

import { Store, Effect, EventCallable } from "effector";
declare interface StorageAdapter {
  <State>(
    key: string,
    update: (raw?: any) => void
  ): {
    get(raw?: any, ctx?: any): State | Promise<State | void> | void,
    set(value: State, ctx?: any): void,
    ...
  };
  keyArea?: any;
  noop?: boolean;
}
declare interface StorageAdapterFactory<AdapterConfig> {
  (config?: AdapterConfig): StorageAdapter;
  factory: true;
}
declare function async<A: StorageAdapter | StorageAdapterFactory<any>>(
  adapter: A
): $FlowGen$If<
  $FlowGen$Assignable<A, StorageAdapterFactory<T>>,
  StorageAdapterFactory<T>,
  StorageAdapter
>;
declare function either<
  A1: StorageAdapter | StorageAdapterFactory<any>,
  A2: StorageAdapter | StorageAdapterFactory<any>
>(
  one: A1,
  another: A2
): $FlowGen$If<
  $FlowGen$Assignable<A1, StorageAdapterFactory<T1>>,
  $FlowGen$If<
    $FlowGen$Assignable<A2, StorageAdapterFactory<T2>>,
    StorageAdapterFactory<{ ...T1, ...T2 }>,
    StorageAdapterFactory<T1>
  >,
  $FlowGen$If<
    $FlowGen$Assignable<A2, StorageAdapterFactory<T2>>,
    StorageAdapterFactory<T2>,
    StorageAdapter
  >
>;
declare interface CacheAdapterInstance {
  get: Effect<
    {
      key: string,
      ...
    },
    {
      value: mixed,
      cachedAt: number,
      ...
    } | null
  >;
  set: Effect<
    {
      key: string,
      value: mixed,
      ...
    },
    void
  >;
  purge: EventCallable<void>;
  unset: Effect<
    {
      key: string,
      ...
    },
    void
  >;
}
declare type CacheAdapter = {
  __: {
    $instance: Store<CacheAdapterInstance>,
    ...
  },
  ...
} & CacheAdapterInstance;
declare function farcached(
  adapter: CacheAdapter,
  keyArea?: any
): StorageAdapter;
declare export { async, either, farcached };
