{"version":3,"file":"index.cjs","sources":["../../src/tools/async.ts","../../src/tools/either.ts","../../src/tools/farcached.ts"],"sourcesContent":["import type { StorageAdapter, StorageAdapterFactory } from '../types'\n\n/**\n * Makes synchronous storage adapter asynchronous\n */\n\nexport function async<A extends StorageAdapter | StorageAdapterFactory<any>>(\n  adapter: A\n): A extends StorageAdapterFactory<infer T>\n  ? StorageAdapterFactory<T>\n  : StorageAdapter\n\nexport function async<T>(\n  adapterOrFactory: StorageAdapter | StorageAdapterFactory<T>\n): StorageAdapter | StorageAdapterFactory<T> {\n  const isFactory = 'factory' in adapterOrFactory\n\n  create.factory = true as const\n  function create(config?: T) {\n    const adapter = isFactory ? adapterOrFactory(config) : adapterOrFactory\n\n    const asyncAdapter: StorageAdapter = <State>(\n      key: string,\n      update: (raw?: any) => void\n    ) => {\n      const { get, set } = adapter<State>(key, update)\n      return {\n        get: async (value?: any, ctx?: any) => get(await value, ctx),\n        set: async (value: State, ctx?: any) => set(await value, ctx),\n      }\n    }\n\n    asyncAdapter.keyArea = adapter.keyArea\n    asyncAdapter.noop = adapter.noop\n    return asyncAdapter\n  }\n\n  return isFactory ? create : create()\n}\n","import type { StorageAdapter, StorageAdapterFactory } from '../types'\n\n/**\n * Returns first adapter, if it is not noop, and second otherwise.\n *\n * In this example,\n *  - adapter for localStorage will be used in browser environment,\n *  - logging adapter will be used in node environment\n *\n * persist({\n *   store: $store,\n *   adapter: either(local(), log()),\n *   key: 'store'\n * })\n *\n * could be also used with factories\n *\n * persist({\n *   store: $store,\n *   adapter: either(local, log),\n *   key: 'store'\n * })\n *\n * or even mixed\n *\n * persist({\n *   store: $store,\n *   adapter: either(local, log()),\n *   key: 'store'\n * })\n */\n\nexport function either<\n  A1 extends StorageAdapter | StorageAdapterFactory<any>,\n  A2 extends StorageAdapter | StorageAdapterFactory<any>,\n>(\n  one: A1,\n  another: A2\n): A1 extends StorageAdapterFactory<infer T1>\n  ? A2 extends StorageAdapterFactory<infer T2>\n    ? StorageAdapterFactory<T1 & T2>\n    : StorageAdapterFactory<T1>\n  : A2 extends StorageAdapterFactory<infer T2>\n    ? StorageAdapterFactory<T2>\n    : StorageAdapter\n\nexport function either<T1, T2>(\n  one: StorageAdapter | StorageAdapterFactory<T1>,\n  another: StorageAdapter | StorageAdapterFactory<T2>\n): StorageAdapter | StorageAdapterFactory<T1 & T2> {\n  const isFactory1 = 'factory' in one\n  const isFactory2 = 'factory' in another\n\n  create.factory = true as const\n  function create(config?: T1 & T2) {\n    const adapter1 = isFactory1 ? one(config) : one\n    const adapter2 = isFactory2 ? another(config) : another\n    return adapter1.noop ? adapter2 : adapter1\n  }\n\n  return isFactory1 || isFactory2 ? create : create()\n}\n","import type { StorageAdapter } from '../types'\nimport type { CacheAdapter } from '@farfetched/core'\nimport { attach } from 'effector'\n\n/**\n * Wraps @farfetched/core cache adapter to be used as `persist` adapter :)\n * @see https://farfetched.pages.dev/api/operators/cache.html\n *\n * persist({\n *   store: $store,\n *   adapter: farcached(localStorageCache({ maxAge: '15m' })),\n *   key: 'store'\n * })\n *\n * Out of the box Farfetched provides 4 cache adapters:\n * - `inMemoryCache`\n * - `sessionStorageCache`\n * - `localStorageCache`\n * - `voidCache` (this one is noop)\n *\n * From real usage point of view, using Farfetched cache adapters could be useful,\n * when you need logic for cache invalidation, because all of provided adapters\n * have `maxAge` option.\n *\n * Also, you could use Farfetched cache adapters to inject different\n * cache adapters with `fork` using `cache.__.$instance` internal store.\n * @see https://farfetched.pages.dev/recipes/server_cache.html#inject-adapter\n */\n\nexport function farcached(\n  adapter: CacheAdapter,\n  keyArea?: any\n): StorageAdapter {\n  const farfetchedAdapter: StorageAdapter = <State>(key: string) => {\n    return {\n      get: attach({\n        source: adapter.__.$instance,\n        async effect(instance: CacheAdapter) {\n          const persisted = await instance.get({ key })\n          return persisted?.value as State\n        },\n      } as any),\n      set: attach({\n        source: adapter.__.$instance,\n        async effect(instance: CacheAdapter, value?: any) {\n          return instance.set({ key, value })\n        },\n      } as any),\n    }\n  }\n\n  farfetchedAdapter.keyArea = keyArea ?? adapter\n  return farfetchedAdapter\n}\n"],"names":["adapterOrFactory","isFactory","create","config","adapter","asyncAdapter","key","update","get","set","async","value","ctx","keyArea","noop","factory","one","another","isFactory1","isFactory2","adapter1","adapter2","farfetchedAdapter","attach","source","__","$instance","effect","instance","persisted"],"mappings":"qDAYO,SACLA,GAEA,IAAMC,EAAY,YAAaD,EAG/B,SAASE,EAAOC,GACd,IAAMC,EAAUH,EAAYD,EAAiBG,GAAUH,EAEjDK,EAA+BA,CACnCC,EACAC,KAEA,IAAMC,IAAEA,EAAGC,IAAEA,GAAQL,EAAeE,EAAKC,GACzC,MAAO,CACLC,IAAKE,MAAOC,EAAaC,IAAcJ,QAAUG,EAAOC,GACxDH,IAAKC,MAAOC,EAAcC,IAAcH,QAAUE,EAAOC,GAC1D,EAKH,OAFAP,EAAaQ,QAAUT,EAAQS,QAC/BR,EAAaS,KAAOV,EAAQU,KACrBT,CACT,CAEA,OApBAH,EAAOa,SAAU,EAoBVd,EAAYC,EAASA,GAC9B,iBCQO,SACLc,EACAC,GAEA,IAAMC,EAAa,YAAaF,EAC1BG,EAAa,YAAaF,EAGhC,SAASf,EAAOC,GACd,IAAMiB,EAAWF,EAAaF,EAAIb,GAAUa,EACtCK,EAAWF,EAAaF,EAAQd,GAAUc,EAChD,OAAOG,EAASN,KAAOO,EAAWD,CACpC,CAEA,OAPAlB,EAAOa,SAAU,EAOVG,GAAcC,EAAajB,EAASA,GAC7C,oBChCO,SACLE,EACAS,GAEA,IAAMS,EAA4ChB,IACzC,CACLE,IAAKe,EAAAA,OAAO,CACVC,OAAQpB,EAAQqB,GAAGC,UACnB,YAAMC,CAAOC,GACX,IAAMC,QAAkBD,EAASpB,IAAI,CAAEF,QACvC,OAAOuB,GAAWlB,KACpB,IAEFF,IAAKc,EAAAA,OAAO,CACVC,OAAQpB,EAAQqB,GAAGC,UACnBhB,OAAYiB,MAACC,EAAwBjB,IAC5BiB,EAASnB,IAAI,CAAEH,MAAKK,cAOnC,OADAW,EAAkBT,QAAUA,GAAWT,EAChCkB,CACT"}