{"version":3,"file":"index.js","sources":["../../src/local/index.ts"],"sourcesContent":["import type { Subscription } from 'effector'\nimport type {\n  ConfigPersist as BaseConfigPersist,\n  ConfigStore as BaseConfigStore,\n  ConfigSourceTarget as BaseConfigSourceTarget,\n  StorageAdapter,\n} from '../types'\nimport { persist as base } from '../core'\nimport { nil } from '../nil'\nimport { storage } from '../storage'\n\nexport type {\n  Contract,\n  Done,\n  Fail,\n  Finally,\n  StorageAdapter,\n  StorageAdapterFactory,\n} from '../types'\n\nexport interface ConfigPersist extends BaseConfigPersist {\n  sync?: boolean | 'force'\n  timeout?: number\n}\n\nexport interface LocalStorageConfig {\n  sync?: boolean | 'force'\n  serialize?: (value: any) => string\n  deserialize?: (value: string) => any\n  timeout?: number\n  def?: any\n}\n\nexport interface ConfigStore<State, Err = Error>\n  extends LocalStorageConfig,\n    BaseConfigStore<State, Err> {}\n\nexport interface ConfigSourceTarget<State, Err = Error>\n  extends LocalStorageConfig,\n    BaseConfigSourceTarget<State, Err> {}\n\nexport interface Persist {\n  <State, Err = Error>(config: ConfigSourceTarget<State, Err>): Subscription\n  <State, Err = Error>(config: ConfigStore<State, Err>): Subscription\n}\n\n/**\n * Function, checking if `localStorage` exists\n */\nfunction supports() {\n  try {\n    return typeof localStorage !== 'undefined'\n  } catch (error) {\n    // accessing `localStorage` could throw an exception only in one case -\n    // when `localStorage` IS supported, but blocked by security policies\n    return true\n  }\n}\n\n/**\n * Creates `localStorage` adapter\n */\nlocal.factory = true as const\nexport function local(config?: LocalStorageConfig): StorageAdapter {\n  return supports()\n    ? storage({\n        storage: () => localStorage,\n        sync: true,\n        ...config,\n      })\n    : nil({ keyArea: 'local' })\n}\n\n/**\n * Creates custom partially applied `persist`\n * with predefined `localStorage` adapter\n */\nexport function createPersist(defaults?: ConfigPersist): Persist {\n  return (config) =>\n    base({\n      adapter: local,\n      ...defaults,\n      ...config,\n    })\n}\n\n/**\n * Default partially applied `persist`\n */\nexport const persist = createPersist()\n"],"names":["local","config","localStorage","error","supports","storage","sync","nil","keyArea","createPersist","defaults","base","adapter","factory","persist"],"mappings":"+HA+DO,SAASA,EAAMC,GACpB,OAfF,WACE,IACE,MAA+B,oBAAjBC,YACf,CAAC,MAAOC,GAGP,OAAO,CACT,CACF,CAOSC,GACHC,EAAQ,CACNA,QAASA,IAAMH,aACfI,MAAM,KACHL,IAELM,EAAI,CAAEC,QAAS,SACrB,CAMO,SAASC,EAAcC,GAC5B,OAAQT,GACNU,EAAK,CACHC,QAASZ,KACNU,KACAT,GAET,CAtBAD,EAAMa,SAAU,EA2BHC,IAAAA,EAAUL"}