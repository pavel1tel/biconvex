interface StorageAdapter {
    <State>(key: string, update: (raw?: any) => void): {
        get(raw?: any, ctx?: any): State | Promise<State | undefined> | undefined;
        set(value: State, ctx?: any): void;
    };
    keyArea?: any;
    noop?: boolean;
}

interface StorageConfig {
    storage: () => Storage;
    sync?: boolean | 'force';
    serialize?: (value: any) => string;
    deserialize?: (value: string) => any;
    timeout?: number;
    def?: any;
}
declare function storage({ storage, sync, serialize, deserialize, timeout, def, }: StorageConfig): StorageAdapter;
declare namespace storage {
    var factory: true;
}

export { type StorageConfig, storage };
