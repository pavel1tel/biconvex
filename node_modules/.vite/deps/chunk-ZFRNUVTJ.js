import {
  $,
  F,
  ae,
  b,
  g,
  h,
  j,
  ke,
  p,
  v,
  x
} from "./chunk-6YLY4OPZ.js";

// node_modules/path-to-regexp/dist.es2015/index.js
function lexer(str) {
  var tokens = [];
  var i2 = 0;
  while (i2 < str.length) {
    var char = str[i2];
    if (char === "*" || char === "+" || char === "?") {
      tokens.push({ type: "MODIFIER", index: i2, value: str[i2++] });
      continue;
    }
    if (char === "\\") {
      tokens.push({ type: "ESCAPED_CHAR", index: i2++, value: str[i2++] });
      continue;
    }
    if (char === "{") {
      tokens.push({ type: "OPEN", index: i2, value: str[i2++] });
      continue;
    }
    if (char === "}") {
      tokens.push({ type: "CLOSE", index: i2, value: str[i2++] });
      continue;
    }
    if (char === ":") {
      var name = "";
      var j2 = i2 + 1;
      while (j2 < str.length) {
        var code = str.charCodeAt(j2);
        if (
          // `0-9`
          code >= 48 && code <= 57 || // `A-Z`
          code >= 65 && code <= 90 || // `a-z`
          code >= 97 && code <= 122 || // `_`
          code === 95
        ) {
          name += str[j2++];
          continue;
        }
        break;
      }
      if (!name)
        throw new TypeError("Missing parameter name at ".concat(i2));
      tokens.push({ type: "NAME", index: i2, value: name });
      i2 = j2;
      continue;
    }
    if (char === "(") {
      var count = 1;
      var pattern = "";
      var j2 = i2 + 1;
      if (str[j2] === "?") {
        throw new TypeError('Pattern cannot start with "?" at '.concat(j2));
      }
      while (j2 < str.length) {
        if (str[j2] === "\\") {
          pattern += str[j2++] + str[j2++];
          continue;
        }
        if (str[j2] === ")") {
          count--;
          if (count === 0) {
            j2++;
            break;
          }
        } else if (str[j2] === "(") {
          count++;
          if (str[j2 + 1] !== "?") {
            throw new TypeError("Capturing groups are not allowed at ".concat(j2));
          }
        }
        pattern += str[j2++];
      }
      if (count)
        throw new TypeError("Unbalanced pattern at ".concat(i2));
      if (!pattern)
        throw new TypeError("Missing pattern at ".concat(i2));
      tokens.push({ type: "PATTERN", index: i2, value: pattern });
      i2 = j2;
      continue;
    }
    tokens.push({ type: "CHAR", index: i2, value: str[i2++] });
  }
  tokens.push({ type: "END", index: i2, value: "" });
  return tokens;
}
function parse(str, options) {
  if (options === void 0) {
    options = {};
  }
  var tokens = lexer(str);
  var _a = options.prefixes, prefixes = _a === void 0 ? "./" : _a;
  var defaultPattern = "[^".concat(escapeString(options.delimiter || "/#?"), "]+?");
  var result = [];
  var key = 0;
  var i2 = 0;
  var path = "";
  var tryConsume = function(type) {
    if (i2 < tokens.length && tokens[i2].type === type)
      return tokens[i2++].value;
  };
  var mustConsume = function(type) {
    var value2 = tryConsume(type);
    if (value2 !== void 0)
      return value2;
    var _a2 = tokens[i2], nextType = _a2.type, index = _a2.index;
    throw new TypeError("Unexpected ".concat(nextType, " at ").concat(index, ", expected ").concat(type));
  };
  var consumeText = function() {
    var result2 = "";
    var value2;
    while (value2 = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR")) {
      result2 += value2;
    }
    return result2;
  };
  while (i2 < tokens.length) {
    var char = tryConsume("CHAR");
    var name = tryConsume("NAME");
    var pattern = tryConsume("PATTERN");
    if (name || pattern) {
      var prefix = char || "";
      if (prefixes.indexOf(prefix) === -1) {
        path += prefix;
        prefix = "";
      }
      if (path) {
        result.push(path);
        path = "";
      }
      result.push({
        name: name || key++,
        prefix,
        suffix: "",
        pattern: pattern || defaultPattern,
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    var value = char || tryConsume("ESCAPED_CHAR");
    if (value) {
      path += value;
      continue;
    }
    if (path) {
      result.push(path);
      path = "";
    }
    var open = tryConsume("OPEN");
    if (open) {
      var prefix = consumeText();
      var name_1 = tryConsume("NAME") || "";
      var pattern_1 = tryConsume("PATTERN") || "";
      var suffix = consumeText();
      mustConsume("CLOSE");
      result.push({
        name: name_1 || (pattern_1 ? key++ : ""),
        pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,
        prefix,
        suffix,
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    mustConsume("END");
  }
  return result;
}
function compile(str, options) {
  return tokensToFunction(parse(str, options), options);
}
function tokensToFunction(tokens, options) {
  if (options === void 0) {
    options = {};
  }
  var reFlags = flags(options);
  var _a = options.encode, encode = _a === void 0 ? function(x2) {
    return x2;
  } : _a, _b = options.validate, validate = _b === void 0 ? true : _b;
  var matches = tokens.map(function(token) {
    if (typeof token === "object") {
      return new RegExp("^(?:".concat(token.pattern, ")$"), reFlags);
    }
  });
  return function(data) {
    var path = "";
    for (var i2 = 0; i2 < tokens.length; i2++) {
      var token = tokens[i2];
      if (typeof token === "string") {
        path += token;
        continue;
      }
      var value = data ? data[token.name] : void 0;
      var optional = token.modifier === "?" || token.modifier === "*";
      var repeat = token.modifier === "*" || token.modifier === "+";
      if (Array.isArray(value)) {
        if (!repeat) {
          throw new TypeError('Expected "'.concat(token.name, '" to not repeat, but got an array'));
        }
        if (value.length === 0) {
          if (optional)
            continue;
          throw new TypeError('Expected "'.concat(token.name, '" to not be empty'));
        }
        for (var j2 = 0; j2 < value.length; j2++) {
          var segment = encode(value[j2], token);
          if (validate && !matches[i2].test(segment)) {
            throw new TypeError('Expected all "'.concat(token.name, '" to match "').concat(token.pattern, '", but got "').concat(segment, '"'));
          }
          path += token.prefix + segment + token.suffix;
        }
        continue;
      }
      if (typeof value === "string" || typeof value === "number") {
        var segment = encode(String(value), token);
        if (validate && !matches[i2].test(segment)) {
          throw new TypeError('Expected "'.concat(token.name, '" to match "').concat(token.pattern, '", but got "').concat(segment, '"'));
        }
        path += token.prefix + segment + token.suffix;
        continue;
      }
      if (optional)
        continue;
      var typeOfMessage = repeat ? "an array" : "a string";
      throw new TypeError('Expected "'.concat(token.name, '" to be ').concat(typeOfMessage));
    }
    return path;
  };
}
function match(str, options) {
  var keys = [];
  var re = pathToRegexp(str, keys, options);
  return regexpToFunction(re, keys, options);
}
function regexpToFunction(re, keys, options) {
  if (options === void 0) {
    options = {};
  }
  var _a = options.decode, decode = _a === void 0 ? function(x2) {
    return x2;
  } : _a;
  return function(pathname) {
    var m2 = re.exec(pathname);
    if (!m2)
      return false;
    var path = m2[0], index = m2.index;
    var params = /* @__PURE__ */ Object.create(null);
    var _loop_1 = function(i3) {
      if (m2[i3] === void 0)
        return "continue";
      var key = keys[i3 - 1];
      if (key.modifier === "*" || key.modifier === "+") {
        params[key.name] = m2[i3].split(key.prefix + key.suffix).map(function(value) {
          return decode(value, key);
        });
      } else {
        params[key.name] = decode(m2[i3], key);
      }
    };
    for (var i2 = 1; i2 < m2.length; i2++) {
      _loop_1(i2);
    }
    return { path, index, params };
  };
}
function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
}
function flags(options) {
  return options && options.sensitive ? "" : "i";
}
function regexpToRegexp(path, keys) {
  if (!keys)
    return path;
  var groupsRegex = /\((?:\?<(.*?)>)?(?!\?)/g;
  var index = 0;
  var execResult = groupsRegex.exec(path.source);
  while (execResult) {
    keys.push({
      // Use parenthesized substring match if available, index otherwise
      name: execResult[1] || index++,
      prefix: "",
      suffix: "",
      modifier: "",
      pattern: ""
    });
    execResult = groupsRegex.exec(path.source);
  }
  return path;
}
function arrayToRegexp(paths, keys, options) {
  var parts = paths.map(function(path) {
    return pathToRegexp(path, keys, options).source;
  });
  return new RegExp("(?:".concat(parts.join("|"), ")"), flags(options));
}
function stringToRegexp(path, keys, options) {
  return tokensToRegexp(parse(path, options), keys, options);
}
function tokensToRegexp(tokens, keys, options) {
  if (options === void 0) {
    options = {};
  }
  var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function(x2) {
    return x2;
  } : _d, _e = options.delimiter, delimiter = _e === void 0 ? "/#?" : _e, _f = options.endsWith, endsWith = _f === void 0 ? "" : _f;
  var endsWithRe = "[".concat(escapeString(endsWith), "]|$");
  var delimiterRe = "[".concat(escapeString(delimiter), "]");
  var route = start ? "^" : "";
  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
    var token = tokens_1[_i];
    if (typeof token === "string") {
      route += escapeString(encode(token));
    } else {
      var prefix = escapeString(encode(token.prefix));
      var suffix = escapeString(encode(token.suffix));
      if (token.pattern) {
        if (keys)
          keys.push(token);
        if (prefix || suffix) {
          if (token.modifier === "+" || token.modifier === "*") {
            var mod = token.modifier === "*" ? "?" : "";
            route += "(?:".concat(prefix, "((?:").concat(token.pattern, ")(?:").concat(suffix).concat(prefix, "(?:").concat(token.pattern, "))*)").concat(suffix, ")").concat(mod);
          } else {
            route += "(?:".concat(prefix, "(").concat(token.pattern, ")").concat(suffix, ")").concat(token.modifier);
          }
        } else {
          if (token.modifier === "+" || token.modifier === "*") {
            route += "((?:".concat(token.pattern, ")").concat(token.modifier, ")");
          } else {
            route += "(".concat(token.pattern, ")").concat(token.modifier);
          }
        }
      } else {
        route += "(?:".concat(prefix).concat(suffix, ")").concat(token.modifier);
      }
    }
  }
  if (end) {
    if (!strict)
      route += "".concat(delimiterRe, "?");
    route += !options.endsWith ? "$" : "(?=".concat(endsWithRe, ")");
  } else {
    var endToken = tokens[tokens.length - 1];
    var isEndDelimited = typeof endToken === "string" ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1 : endToken === void 0;
    if (!strict) {
      route += "(?:".concat(delimiterRe, "(?=").concat(endsWithRe, "))?");
    }
    if (!isEndDelimited) {
      route += "(?=".concat(delimiterRe, "|").concat(endsWithRe, ")");
    }
  }
  return new RegExp(route, flags(options));
}
function pathToRegexp(path, keys, options) {
  if (path instanceof RegExp)
    return regexpToRegexp(path, keys);
  if (Array.isArray(path))
    return arrayToRegexp(path, keys, options);
  return stringToRegexp(path, keys, options);
}

// node_modules/atomic-router/dist/atomic-router.mjs
function e(e2) {
  e2 === void 0 && (e2 = {});
  var r2 = b((e3) => {
    var r3 = e3.replace;
    return { params: e3.params || {}, query: e3.query || {}, replace: r3 !== void 0 && r3 };
  }, { name: "navigateFx", sid: "-16itqs" }), a2 = v({ and: { effect: r2, mapParams: (e3) => ({ params: e3 || {}, query: {} }) }, or: { name: "openFx", sid: "-34ax4v" } }), o2 = h(false, { name: "$isOpened", sid: "-mkdat5" }), t2 = h({}, { name: "$params", sid: "-dji428" }), n2 = h({}, { name: "$query", sid: "g8ahyi" }), i2 = p({ name: "opened", sid: "1k4p4d" }), d2 = p({ name: "updated", sid: "2eisw8" }), s2 = p({ name: "closed", sid: "yx116h" });
  return o2.on(i2, () => true).on(s2, () => false), t2.on(i2, (e3, r3) => r3.params).on(d2, (e3, r3) => r3.params), n2.on(i2, (e3, r3) => r3.query).on(d2, (e3, r3) => r3.query), j({ and: [{ source: r2.doneData, match: o2.map((e3) => e3 ? "updated" : "opened"), cases: { opened: i2, updated: d2 } }], or: { sid: "2pgafx" } }), { $isOpened: o2, $params: t2, $query: n2, opened: i2, updated: d2, closed: s2, navigate: r2, open: a2, kind: F2.ROUTE, settings: { derived: Boolean(e2.filter) } };
}
function r(e2, r2) {
  var a2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o2 = Object.getOwnPropertySymbols(e2);
    r2 && (o2 = o2.filter((r3) => Object.getOwnPropertyDescriptor(e2, r3).enumerable)), a2.push.apply(a2, o2);
  }
  return a2;
}
function a(e2) {
  for (var a2 = 1; a2 < arguments.length; a2++) {
    var o2 = null != arguments[a2] ? arguments[a2] : {};
    a2 % 2 ? r(Object(o2), true).forEach((r2) => {
      var a3, t2, n2;
      a3 = e2, n2 = o2[r2], (t2 = ((e3) => {
        var r3 = ((e4) => {
          if ("object" != typeof e4 || !e4)
            return e4;
          var r4 = e4[Symbol.toPrimitive];
          if (void 0 !== r4) {
            var a4 = r4.call(e4, "string");
            if ("object" != typeof a4)
              return a4;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return String(e4);
        })(e3);
        return "symbol" == typeof r3 ? r3 : String(r3);
      })(t2 = r2)) in a3 ? Object.defineProperty(a3, t2, { value: n2, enumerable: true, configurable: true, writable: true }) : a3[t2] = n2;
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(o2)) : r(Object(o2)).forEach((r2) => {
      Object.defineProperty(e2, r2, Object.getOwnPropertyDescriptor(o2, r2));
    });
  }
  return e2;
}
function o(e2, r2) {
  (r2 == null || r2 > e2.length) && (r2 = e2.length);
  for (var a2 = 0, o2 = new Array(r2); a2 < r2; a2++)
    o2[a2] = e2[a2];
  return o2;
}
function t(e2, r2) {
  var it = typeof Symbol != "undefined" && e2[Symbol.iterator] || e2["@@iterator"];
  if (it)
    return (it = it.call(e2)).next.bind(it);
  if (Array.isArray(e2) || (it = ((e3, r3) => {
    if (e3) {
      if (typeof e3 == "string")
        return o(e3, r3);
      var a3 = {}.toString.call(e3).slice(8, -1);
      return a3 === "Object" && e3.constructor && (a3 = e3.constructor.name), a3 === "Map" || a3 === "Set" ? Array.from(e3) : a3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a3) ? o(e3, r3) : void 0;
    }
  })(e2)) || r2 && e2 && typeof e2.length == "number") {
    it && (e2 = it);
    var a2 = 0;
    return () => a2 >= e2.length ? { done: true } : { done: false, value: e2[a2++] };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function n(e2, r2) {
  if (Object.keys(e2).length !== Object.keys(r2).length)
    return false;
  for (var a2 in e2)
    if ("" + e2[a2] != "" + r2[a2])
      return false;
  return true;
}
function i() {
  return { $query: h({}, { and: { updateFilter: (e2, r2) => !n(r2, e2) }, name: "$query", sid: "-6fm59b" }), back: p({ name: "back", sid: "m7e58l" }), forward: p({ name: "forward", sid: "-4wdrfl" }) };
}
function d(e2) {
  var r2, a2 = e2.params, o2 = e2.query, t2 = e2.serialize, n2 = compile(e2.pathCreator)(a2), i2 = (r2 = t2 === null || t2 === void 0 ? void 0 : t2.write(o2)) !== null && r2 !== void 0 ? r2 : new URLSearchParams(o2);
  return n2 + (Object.keys(o2).length ? "?" + i2 : "");
}
function s(e2) {
  var r2 = e2.actualPath, a2 = match(e2.pathCreator.replace("://", "\\://"))(U(r2));
  return a2 ? { matches: true, params: a2.params } : { matches: false };
}
function u(e2) {
  return typeof e2 == "object" && e2 !== null && "kind" in e2 && e2.kind === F2.ROUTE;
}
function c(e2) {
  return u(e2);
}
function l(e2) {
  if (!e2)
    throw new Error("[Atomic-Router] No history provided");
}
function p2(e2) {
  return e2.map((e3) => !e3);
}
function m(e2) {
  var r2 = e2.base, o2 = e2.routes, u2 = e2.notFoundRoute, l2 = e2.hydrate, m2 = e2.serialize, f2 = e2.controls, v3 = f2 === void 0 ? ke({ sid: "-eby7", fn: () => i(), name: "controls", method: "createRouterControls" }) : f2, y2 = h(l2 !== null && l2 !== void 0 && l2, { and: { serialize: "ignore" }, name: "$hydrateMode", sid: "-i2numw" }), h3 = ((e3, r3) => {
    r3 === void 0 && (r3 = "");
    for (var o3, n2 = [], i2 = () => {
      var e4, r4 = o3.value;
      Array.isArray(r4.route) ? (e4 = n2).push.apply(e4, r4.route.map((e5) => a(a({}, r4), {}, { route: e5 }))) : n2.push(r4);
    }, d2 = t(e3); !(o3 = d2()).done; )
      i2();
    n2 = n2.map((e4) => a(a({}, e4), {}, { path: "" + r3 + e4.path }));
    for (var s2, u3 = [], c2 = [], l3 = t(n2); !(s2 = l3()).done; ) {
      var p3 = s2.value;
      p3.route.settings.derived ? u3.push(p3) : c2.push(p3);
    }
    if (u3.length)
      for (var m3, f3 = t(u3); !(m3 = f3()).done; )
        console.error("[Atomic-Router]: createHistoryRouter: " + m3.value.path + " uses derived route. This won't work");
    return c2;
  })(o2, r2), g2 = p({ name: "setHistory", sid: "wo9d0s" }), q = p({ name: "navigateFromRouteTriggered", sid: "9zf2q7" }), z = p({ name: "historyUpdated", sid: "-2drux" }), P = p({ name: "recalculateTriggered", sid: "dwpshq" }), x2 = p({ name: "recalculated", sid: "cnxs21" }), S = p({ name: "routesMatched", sid: "-oym918" }), F3 = p({ name: "routesMismatched", sid: "wtlio3" }), U2 = p({ name: "routeNotFound", sid: "-co9rfg" }), I2 = p({ name: "initialized", sid: "uzcs7d" }), C = h("", { name: "$path", sid: "w0v7zo" }), H = h({}, { and: { name: "historyRouter.$query", updateFilter: (e3, r3) => !n(e3, r3) }, name: "$query", sid: "34mtvb" }), Q = h([], { and: { serialize: "ignore" }, name: "$activeRoutes", sid: "-q9xrap" }), L = h(null, { and: { serialize: "ignore" }, name: "$history", sid: "jk9nd5" }), M = h(false, { name: "$isFirstCheckPassed", sid: "y4c34b" }), N = h(false, { name: "$isRouteNavigateInProgress", sid: "-6c2ssl" }), B = v({ and: { source: L, effect: (e3, r3) => E(a({ history: e3 }, r3)) }, or: { name: "pushFx", sid: "gzjrp0" } }), _ = v({ and: { source: L, effect: (e3) => {
    var r3 = z;
    try {
      r3 = F(z);
    } catch (e4) {
    }
    return e3.listen(() => {
      r3();
    }), true;
  } }, or: { name: "subscribeHistoryFx", sid: "5wp0bd" } }), G = x({ and: [{ clock: l2 ? [z] : [z, _.done], source: L, filter: Boolean, fn: (e3) => {
    var r3;
    return { path: e3.location.pathname, query: (r3 = m2 === null || m2 === void 0 ? void 0 : m2.read(e3.location.search)) !== null && r3 !== void 0 ? r3 : Object.fromEntries(new URLSearchParams(e3.location.search)) };
  } }], or: { name: "historyUpdatedParsed", sid: "fmwavu" } }), J = x({ and: [{ clock: G, source: { path: C, query: H }, filter: (e3, r3) => r3.path !== e3.path || !n(r3.query, e3.query), fn: (e3, r3) => r3 }], or: { name: "historyUpdateTriggered", sid: "-qpa0p5" } });
  L.on(g2, (e3, r3) => r3), x({ and: [{ clock: L, target: _ }], or: { sid: "rwilmr" } }), x({ and: [{ clock: J, source: L, filter: Boolean, fn: (e3) => {
    var r3, a2 = e3 === null || e3 === void 0 ? void 0 : e3.location.hash;
    return { path: e3 === null || e3 === void 0 ? void 0 : e3.location.pathname, query: (r3 = m2 === null || m2 === void 0 ? void 0 : m2.read(e3 === null || e3 === void 0 ? void 0 : e3.location.search)) !== null && r3 !== void 0 ? r3 : Object.fromEntries(new URLSearchParams(e3 === null || e3 === void 0 ? void 0 : e3.location.search)), hash: a2 };
  }, target: P }], or: { sid: "rz9klk" } });
  for (var K, V = t(h3); !(K = V()).done; ) {
    var W = K.value, X = S.filterMap(D(W)), Y = F3.filterMap(D(W)), Z = { initialized: x({ and: [{ clock: _.done, filter: g({ and: [W.route.$isOpened, y2, (e3, r3) => e3 && !r3], or: { name: "filter", sid: "gu94on" } }) }], or: { name: "initialized", sid: "-gxdv2m" } }), opened: x({ and: [{ clock: X, filter: p2(W.route.$isOpened) }], or: { name: "opened", sid: "rd6yjz" } }), updated: x({ and: [{ clock: X, filter: W.route.$isOpened }], or: { name: "updated", sid: "-owo90k" } }), closed: x({ and: [{ clock: Y, filter: W.route.$isOpened }], or: { name: "closed", sid: "ic5bp1" } }) };
    x({ and: [{ clock: Z.initialized, source: { params: W.route.$params, query: W.route.$query }, target: W.route.opened }], or: { sid: "-ue11fh" } }), x({ and: [{ clock: Z.updated, source: [W.route.$params, W.route.$query], filter: (e3, r3) => {
      var a2 = e3[1];
      return !n(e3[0], r3.params) || !n(a2, r3.query);
    }, fn: (e3, r3) => r3, target: W.route.updated }], or: { sid: "-twzf1a" } }), x({ and: [{ clock: Z.opened, filter: p2(N), target: W.route.opened }], or: { sid: "-tfe01q" } }), x({ and: [{ clock: Z.closed, target: W.route.closed }], or: { sid: "-taznau" } });
  }
  for (var ee, re = () => {
    var e3 = ee.value;
    x({ and: [{ clock: e3.route.navigate.doneData, fn: (r3) => {
      var a2 = r3.replace;
      return { route: e3, params: r3.params, query: r3.query, replace: a2 !== null && a2 !== void 0 && a2 };
    }, target: q }], or: { sid: "-suhti0" } });
  }, ae2 = t(h3); !(ee = ae2()).done; )
    re();
  N.on(q, () => true), x({ and: [{ clock: q, fn: (e3) => {
    var r3 = e3.params, a2 = e3.query, o3 = e3.replace;
    return { path: d({ pathCreator: e3.route.path, params: r3, query: a2, serialize: m2 }), params: r3, query: a2, method: o3 ? "replace" : "push" };
  }, target: B }], or: { sid: "-rzpcbi" } }), N.reset([S, F3]), x({ and: [{ clock: P, fn: (e3) => {
    for (var r3, a2 = e3.path, o3 = e3.query, n2 = e3.hash, i2 = [], d2 = [], u3 = t(h3); !(r3 = u3()).done; ) {
      var c2 = r3.value, l3 = c2.path.includes("#") ? "" + a2 + n2 : "" + a2, p3 = s({ pathCreator: c2.path, actualPath: l3 });
      (p3.matches ? i2 : d2).push({ routeObj: c2, params: p3.params, query: o3 });
    }
    return d2.forEach((e4, r4) => {
      i2.some((r5) => r5.routeObj.route === e4.routeObj.route) && d2.splice(r4, 1);
    }), { matching: i2, mismatching: d2.filter(Boolean), path: a2, query: o3 };
  }, target: x2 }], or: { sid: "-qzex5o" } }), C.on(J, (e3, r3) => r3.path), H.on(J, (e3, r3) => r3.query);
  var oe = x2.map((e3) => e3.matching);
  return x({ and: [{ clock: oe, filter: (e3) => e3.length > 0, target: S }], or: { sid: "-eosjhz" } }), x({ and: [{ clock: x2.map((e3) => e3.mismatching), filter: (e3) => e3.length > 0, target: F3 }], or: { sid: "-e9y3h8" } }), Q.on(x2, (e3, r3) => r3.matching.map((e4) => e4.routeObj.route)), x({ and: [{ clock: oe, filter: (e3) => e3.length === 0, target: U2 }], or: { sid: "-dscoho" } }), ke({ sid: "-dp1wu2", fn: () => c(u2), name: "none", method: "isRouteInternal" }) && (x({ and: [{ clock: U2, source: H, filter: u2.$isOpened, fn: (e3) => ({ query: e3, params: {} }), target: u2.updated }], or: { sid: "-doi4af" } }), x({ and: [{ clock: U2, source: { query: H, isOpened: u2.$isOpened }, filter: (e3) => !e3.isOpened, fn: (e3) => ({ query: e3.query, params: {} }), target: u2.opened }], or: { sid: "-d8k32y" } }), x({ and: [{ clock: oe, source: u2.$isOpened, filter: (e3, r3) => e3 && r3.length > 0, target: u2.closed }], or: { sid: "-csm1vh" } })), x({ and: [{ clock: v3.back, source: L, target: A }], or: { sid: "-cc484d" } }), x({ and: [{ clock: v3.forward, source: L, target: T }], or: { sid: "-bx9s3m" } }), x({ and: [{ clock: H, source: { controlsQuery: v3.$query, localQuery: H }, filter: (e3) => !n(e3.controlsQuery, e3.localQuery), fn: (e3) => e3.localQuery, target: v3.$query }], or: { sid: "-btf7y3" } }), x({ and: [{ clock: v3.$query, source: { path: C, localQuery: H, isNavigateInProgress: N, realHistory: L }, filter: (e3, r3) => {
    var a2, o3, t2, i2 = e3.localQuery, d2 = e3.isNavigateInProgress, s2 = e3.realHistory, u3 = (a2 = m2 === null || m2 === void 0 ? void 0 : m2.read((o3 = s2 === null || s2 === void 0 ? void 0 : s2.location.search) !== null && o3 !== void 0 ? o3 : "")) !== null && a2 !== void 0 ? a2 : Object.fromEntries(new URLSearchParams((t2 = s2 === null || s2 === void 0 ? void 0 : s2.location.search) !== null && t2 !== void 0 ? t2 : ""));
    return d2 || !n(r3, u3) || !n(i2, r3);
  }, fn: (e3, r3) => {
    var a2, o3 = e3.path, t2 = (a2 = m2 === null || m2 === void 0 ? void 0 : m2.write(r3)) !== null && a2 !== void 0 ? a2 : new URLSearchParams(r3);
    return { path: o3 + (t2 ? "?" + t2 : ""), params: {}, query: r3, method: "push" };
  }, target: B }], or: { sid: "-bdh6qm" } }), x({ and: [{ clock: x2, source: { activeRoutes: Q, path: C, query: H }, filter: M.map((e3) => !e3), target: I2 }], or: { sid: "-y1vb" } }), M.on(I2, () => true).reset(L), { $path: C, $activeRoutes: Q, $history: L, setHistory: g2, $query: H, back: v3.back, forward: v3.forward, push: B, routes: h3, initialized: I2, routeNotFound: U2 };
}
function f(e2) {
  var r2 = e2.clock ? x({ and: [{ clock: e2.clock }], or: { name: "clock", sid: "-f15r5p" } }) : p({ name: "clock", sid: "-f0lykc" }), a2 = v2(e2.params || {}), o2 = v2(e2.query || {}), t2 = v2(e2.replace || false);
  return x({ and: [{ clock: r2, source: { params: a2, query: o2, replace: t2 }, fn: (e3, r3) => {
    var a3 = e3.params, o3 = e3.query, t3 = e3.replace;
    return { params: typeof a3 == "function" ? a3(r3) : a3, query: typeof o3 == "function" ? o3(r3) : o3, replace: typeof t3 == "function" ? t3(r3) : t3 };
  }, target: e2.route.navigate }], or: { sid: "a0n4fl" } }), r2;
}
function v2(e2) {
  return ae.store(e2, { sid: "akfpym" }) ? e2 : h(e2, { sid: "-rk12b7" });
}
function y(r2) {
  var a2 = ((r3) => {
    var a3 = {};
    if (ke({ sid: "-oimir7", fn: () => c(r3), name: "none", method: "isRouteInternal" }))
      return Object.assign(a3, { route: r3, chainedRoute: ke({ sid: "nxhp9m", fn: () => e(), name: "chainedRoute", method: "createRoute" }), beforeOpen: p({ name: "beforeOpen", sid: "-mzhjfk" }), openOn: $([r3.opened, r3.closed], { name: "openOn", sid: "-84w4rh" }), cancelOn: $([], { name: "cancelOn", sid: "-l2tb0w" }) }), a3;
    var o3 = r3;
    if (Object.assign(a3, { route: o3.route, chainedRoute: o3.chainedRoute || ke({ sid: "-wf80u2", fn: () => e(), name: "chainedRoute", method: "createRoute" }), beforeOpen: ae.unit(o3.beforeOpen) ? o3.beforeOpen : v({ and: o3.beforeOpen, or: { name: "beforeOpen", sid: "-u0vw04" } }) }), ae.effect(a3.beforeOpen, { sid: "-nlmv5j" }))
      return Object.assign(a3, { openOn: o3.openOn || a3.beforeOpen.doneData, cancelOn: o3.cancelOn || a3.beforeOpen.failData }), a3;
    var t3 = r3;
    return Object.assign(a3, { openOn: x({ and: [{ clock: t3.openOn }], or: { name: "openOn", sid: "o26601" } }), cancelOn: x({ and: [{ clock: t3.cancelOn || p({ name: "clock", sid: "-x23z00" }) }], or: { name: "cancelOn", sid: "l2720p" } }) }), a3;
  })(r2), o2 = a2.route, t2 = a2.chainedRoute, n2 = a2.beforeOpen, i2 = a2.openOn, d2 = a2.cancelOn, s2 = h({}, { name: "$params", sid: "-fpgvka" }), u2 = h({}, { name: "$query", sid: "y4h4ag" }), l2 = g({ and: [g({ and: [[o2.$params, o2.$query]], or: { name: "and", sid: "120e5z" } }), g({ and: [[s2, u2]], or: { name: "and", sid: "12k6rc" } }), (e2, r3) => e2[0] === r3[0] && e2[1] === r3[1]], or: { name: "$hasSameParams", sid: "uvxnko" } }), p3 = x({ and: [{ clock: [o2.opened, o2.updated] }], or: { name: "routeTriggered", sid: "-o4rktf" } });
  x({ and: [{ clock: p3, target: n2 }], or: { sid: "-qinkky" } }), s2.on(p3, (e2, r3) => r3.params), u2.on(p3, (e2, r3) => r3.query), x({ and: [{ clock: i2, source: { params: s2, query: u2 }, filter: l2, target: t2.navigate }], or: { sid: "-q25qs4" } });
  var m2 = $([o2.closed, d2], { name: "aborted", sid: "e9ezkr" });
  return s2.reset(m2), u2.reset(m2), x({ and: [{ clock: m2, target: t2.closed }], or: { sid: "-piwy0h" } }), t2;
}
function h2(e2) {
  var r2, o2, n2, i2 = (r2 = (o2 = e2.route) === null || o2 === void 0 ? void 0 : o2.$isOpened) !== null && r2 !== void 0 ? r2 : h(true, { name: "$isOpened", sid: "-1sf5w3" }), d2 = g({ and: [e2.source], or: { name: "$source", sid: "-4puqls" } }), s2 = (n2 = e2.clock) !== null && n2 !== void 0 ? n2 : d2, u2 = "cleanup" in e2 ? typeof e2.cleanup == "boolean" ? I[e2.cleanup ? "all" : "none"] : a(a({}, I.default), e2.cleanup) : I.default, c2 = x({ and: [{ clock: e2.controls.$query, filter: i2 }], or: { name: "queryUpdatedFromHistory", sid: "7nbv4h" } });
  x({ and: [{ clock: s2, source: g({ and: [[d2, e2.controls.$query]], or: { name: "source", sid: "-4nk0xe" } }), filter: i2, fn: (e3) => {
    var r3 = e3[0], o3 = e3[1], n3 = {};
    if (u2.irrelevant)
      for (var i3, d3 = t(u2.preserve); !(i3 = d3()).done; ) {
        var s3 = i3.value;
        s3 in o3 && (n3[s3] = o3[s3]);
      }
    else
      n3 = a({}, o3);
    for (var c3 in r3)
      n3[c3] = r3[c3];
    if (u2.empty)
      for (var l3 in r3)
        u2.preserve.includes(l3) || n3[l3] || delete n3[l3];
    return n3;
  }, target: e2.controls.$query }], or: { sid: "ftvpyq" } });
  var l2 = (r3) => {
    var a2 = e2.source[r3];
    a2.on(c2, (e3, o3) => {
      var t2;
      return (t2 = o3[r3]) !== null && t2 !== void 0 ? t2 : a2.defaultState;
    });
  };
  for (var p3 in e2.source)
    l2(p3);
}
var F2 = { ROUTE: Symbol() };
var U = (e2) => {
  if (e2.match(/^[a-z0-9]+\:\/\//i))
    return e2;
  var r2 = new URL("http://_" + e2);
  return [r2.pathname, r2.hash].join("");
};
var E = b((e2) => (l(e2.history), e2.history[e2.method](e2.path, {}), e2), { name: "historyPushFx", sid: "xw3ola" });
var A = b((e2) => (l(e2), e2.back(), e2), { name: "historyBackFx", sid: "-q0iw6t" });
var T = b((e2) => (l(e2), e2.forward(), e2), { name: "historyForwardFx", sid: "du9nya" });
var D = (e2) => (r2) => {
  var a2 = r2.find((r3) => r3.routeObj.route === e2.route);
  if (a2)
    return { params: a2.params, query: a2.query };
};
var I = { all: { irrelevant: true, empty: true, preserve: [] }, default: { irrelevant: false, empty: true, preserve: [] }, none: { irrelevant: false, empty: false, preserve: [] } };

export {
  e,
  i,
  d,
  s,
  u,
  m,
  f,
  y,
  h2 as h,
  F2 as F
};
//# sourceMappingURL=chunk-ZFRNUVTJ.js.map
