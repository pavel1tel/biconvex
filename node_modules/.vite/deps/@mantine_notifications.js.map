{
  "version": 3,
  "sources": ["../../@mantine/store/src/store.ts", "../../@mantine/notifications/src/notifications.store.ts", "../../@mantine/notifications/src/get-notification-state-styles.ts", "../../@mantine/notifications/src/get-auto-close/get-auto-close.ts", "../../@mantine/notifications/src/NotificationContainer.tsx", "../../@mantine/notifications/esm/Notifications.module.css.mjs", "../../@mantine/notifications/src/Notifications.tsx"],
  "sourcesContent": ["import { useSyncExternalStore } from 'react';\n\nexport type MantineStoreSubscriber<Value> = (value: Value) => void;\ntype SetStateCallback<Value> = (value: Value) => Value;\n\nexport interface MantineStore<Value> {\n  getState: () => Value;\n  setState: (value: Value | SetStateCallback<Value>) => void;\n  updateState: (value: Value | SetStateCallback<Value>) => void;\n  initialize: (value: Value) => void;\n  subscribe: (callback: MantineStoreSubscriber<Value>) => () => void;\n}\n\nexport type MantineStoreValue<Store extends MantineStore<any>> = ReturnType<Store['getState']>;\n\nexport function createStore<Value extends Record<string, any>>(\n  initialState: Value\n): MantineStore<Value> {\n  let state = initialState;\n  let initialized = false;\n  const listeners = new Set<MantineStoreSubscriber<Value>>();\n\n  return {\n    getState() {\n      return state;\n    },\n\n    updateState(value) {\n      state = typeof value === 'function' ? value(state) : value;\n    },\n\n    setState(value) {\n      this.updateState(value);\n      listeners.forEach((listener) => listener(state));\n    },\n\n    initialize(value) {\n      if (!initialized) {\n        state = value;\n        initialized = true;\n      }\n    },\n\n    subscribe(callback) {\n      listeners.add(callback);\n      return () => listeners.delete(callback);\n    },\n  };\n}\n\nexport function useStore<Store extends MantineStore<any>>(store: Store) {\n  return useSyncExternalStore<MantineStoreValue<Store>>(\n    store.subscribe,\n    () => store.getState(),\n    () => store.getState()\n  );\n}\n", "import { NotificationProps } from '@mantine/core';\nimport { randomId } from '@mantine/hooks';\nimport { createStore, MantineStore, useStore } from '@mantine/store';\n\nexport interface NotificationData extends Omit<NotificationProps, 'onClose'>, Record<string, any> {\n  /** Notification id, can be used to close or update notification */\n  id?: string;\n\n  /** Notification message, required for all notifications */\n  message: React.ReactNode;\n\n  /** Determines whether notification should be closed automatically,\n   *  number is auto close timeout in ms, overrides `autoClose` from `Notifications`\n   * */\n  autoClose?: boolean | number;\n\n  /** Called when notification closes */\n  onClose?: (props: NotificationData) => void;\n\n  /** Called when notification opens */\n  onOpen?: (props: NotificationData) => void;\n}\n\nexport interface NotificationsState {\n  notifications: NotificationData[];\n  queue: NotificationData[];\n  limit: number;\n}\n\nexport type NotificationsStore = MantineStore<NotificationsState>;\n\nexport const createNotificationsStore = () =>\n  createStore<NotificationsState>({\n    notifications: [],\n    queue: [],\n    limit: 5,\n  });\n\nexport const notificationsStore = createNotificationsStore();\nexport const useNotifications = (store: NotificationsStore = notificationsStore) => useStore(store);\n\nexport function updateNotificationsState(\n  store: NotificationsStore,\n  update: (notifications: NotificationData[]) => NotificationData[]\n) {\n  const state = store.getState();\n  const notifications = update([...state.notifications, ...state.queue]);\n\n  store.setState({\n    notifications: notifications.slice(0, state.limit),\n    queue: notifications.slice(state.limit),\n    limit: state.limit,\n  });\n}\n\nexport function showNotification(\n  notification: NotificationData,\n  store: NotificationsStore = notificationsStore\n) {\n  const id = notification.id || randomId();\n\n  updateNotificationsState(store, (notifications) => {\n    if (notification.id && notifications.some((n) => n.id === notification.id)) {\n      return notifications;\n    }\n\n    return [...notifications, { ...notification, id }];\n  });\n\n  return id;\n}\n\nexport function hideNotification(id: string, store: NotificationsStore = notificationsStore) {\n  updateNotificationsState(store, (notifications) =>\n    notifications.filter((notification) => {\n      if (notification.id === id) {\n        notification.onClose?.(notification);\n        return false;\n      }\n\n      return true;\n    })\n  );\n\n  return id;\n}\n\nexport function updateNotification(\n  notification: NotificationData,\n  store: NotificationsStore = notificationsStore\n) {\n  updateNotificationsState(store, (notifications) =>\n    notifications.map((item) => {\n      if (item.id === notification.id) {\n        return { ...item, ...notification };\n      }\n\n      return item;\n    })\n  );\n\n  return notification.id;\n}\n\nexport function cleanNotifications(store: NotificationsStore = notificationsStore) {\n  updateNotificationsState(store, () => []);\n}\n\nexport function cleanNotificationsQueue(store: NotificationsStore = notificationsStore) {\n  updateNotificationsState(store, (notifications) =>\n    notifications.slice(0, store.getState().limit)\n  );\n}\n\nexport const notifications = {\n  show: showNotification,\n  hide: hideNotification,\n  update: updateNotification,\n  clean: cleanNotifications,\n  cleanQueue: cleanNotificationsQueue,\n  updateState: updateNotificationsState,\n} as const;\n", "import { TransitionStatus } from 'react-transition-group';\nimport type { NotificationsProps } from './Notifications';\n\ninterface NotificationStateStylesProps {\n  state: TransitionStatus;\n  maxHeight: number | string;\n  position: NotificationsProps['position'];\n  transitionDuration: number;\n}\n\nconst transforms = {\n  left: 'translateX(-100%)',\n  right: 'translateX(100%)',\n  'top-center': 'translateY(-100%)',\n  'bottom-center': 'translateY(100%)',\n};\n\nconst noTransform = {\n  left: 'translateX(0)',\n  right: 'translateX(0)',\n  'top-center': 'translateY(0)',\n  'bottom-center': 'translateY(0)',\n};\n\nexport function getNotificationStateStyles({\n  state,\n  maxHeight,\n  position,\n  transitionDuration,\n}: NotificationStateStylesProps): React.CSSProperties {\n  const [vertical, horizontal] = position!.split('-');\n  const property = (\n    horizontal === 'center' ? `${vertical}-center` : horizontal\n  ) as keyof typeof transforms;\n\n  const commonStyles: React.CSSProperties = {\n    opacity: 0,\n    maxHeight,\n    transform: transforms[property],\n    transitionDuration: `${transitionDuration}ms, ${transitionDuration}ms, ${transitionDuration}ms`,\n    transitionTimingFunction: 'cubic-bezier(.51,.3,0,1.21), cubic-bezier(.51,.3,0,1.21), linear',\n    transitionProperty: 'opacity, transform, max-height',\n  };\n\n  const inState: React.CSSProperties = {\n    opacity: 1,\n    transform: noTransform[property],\n  };\n\n  const outState: React.CSSProperties = {\n    opacity: 0,\n    maxHeight: 0,\n    transform: transforms[property],\n  };\n\n  const transitionStyles = {\n    entering: inState,\n    entered: inState,\n    exiting: outState,\n    exited: outState,\n  };\n\n  return { ...commonStyles, ...transitionStyles[state as keyof typeof transitionStyles] };\n}\n", "export function getAutoClose(\n  autoClose: boolean | number | undefined,\n  notificationAutoClose: boolean | number | undefined\n) {\n  if (typeof notificationAutoClose === 'number') {\n    return notificationAutoClose;\n  }\n\n  if (notificationAutoClose === false || autoClose === false) {\n    return false;\n  }\n\n  return autoClose;\n}\n", "import React, { forwardRef, useEffect, useRef } from 'react';\nimport { Notification, NotificationProps } from '@mantine/core';\nimport { getAutoClose } from './get-auto-close/get-auto-close';\nimport { NotificationData } from './notifications.store';\n\ninterface NotificationContainerProps extends NotificationProps {\n  data: NotificationData;\n  onHide: (id: string) => void;\n  autoClose: number | false;\n}\n\nexport const NotificationContainer = forwardRef<HTMLDivElement, NotificationContainerProps>(\n  ({ data, onHide, autoClose, ...others }, ref) => {\n    const { autoClose: _autoClose, message, ...notificationProps } = data;\n    const autoCloseDuration = getAutoClose(autoClose, data.autoClose);\n    const autoCloseTimeout = useRef<number>();\n\n    const cancelAutoClose = () => window.clearTimeout(autoCloseTimeout.current);\n\n    const handleHide = () => {\n      onHide(data.id!);\n      cancelAutoClose();\n    };\n\n    const handleAutoClose = () => {\n      if (typeof autoCloseDuration === 'number') {\n        autoCloseTimeout.current = window.setTimeout(handleHide, autoCloseDuration);\n      }\n    };\n\n    useEffect(() => {\n      data.onOpen?.(data);\n    }, []);\n\n    useEffect(() => {\n      handleAutoClose();\n      return cancelAutoClose;\n    }, [autoCloseDuration]);\n\n    return (\n      <Notification\n        {...others}\n        {...notificationProps}\n        onClose={handleHide}\n        ref={ref}\n        onMouseEnter={cancelAutoClose}\n        onMouseLeave={handleAutoClose}\n      >\n        {message}\n      </Notification>\n    );\n  }\n);\n\nNotificationContainer.displayName = '@mantine/notifications/NotificationContainer';\n", "'use client';\nvar classes = {\"root\":\"m-b37d9ac7\",\"notification\":\"m-5ed0edd0\"};\n\nexport { classes as default };\n//# sourceMappingURL=Notifications.module.css.mjs.map\n", "import React, { useEffect, useRef } from 'react';\nimport {\n  Transition as _Transition,\n  TransitionGroup,\n  TransitionStatus,\n} from 'react-transition-group';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getDefaultZIndex,\n  OptionalPortal,\n  PortalProps,\n  rem,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport { useDidUpdate, useForceUpdate, useReducedMotion } from '@mantine/hooks';\nimport { getNotificationStateStyles } from './get-notification-state-styles';\nimport { NotificationContainer } from './NotificationContainer';\nimport {\n  hideNotification,\n  notifications,\n  NotificationsStore,\n  notificationsStore,\n  useNotifications,\n} from './notifications.store';\nimport classes from './Notifications.module.css';\n\nconst Transition: any = _Transition;\n\nexport type NotificationsStylesNames = 'root' | 'notification';\nexport type NotificationsCssVariables = {\n  root:\n    | '--notifications-z-index'\n    | '--notifications-top'\n    | '--notifications-right'\n    | '--notifications-left'\n    | '--notifications-left'\n    | '--notifications-transform'\n    | '--notifications-container-width';\n};\n\nexport interface NotificationsProps\n  extends BoxProps,\n    StylesApiProps<NotificationsFactory>,\n    ElementProps<'div'> {\n  /** Notifications position, `'bottom-right'` by default */\n  position?:\n    | 'top-left'\n    | 'top-right'\n    | 'top-center'\n    | 'bottom-left'\n    | 'bottom-right'\n    | 'bottom-center';\n\n  /** Auto close timeout for all notifications in ms, `false` to disable auto close, can be overwritten for individual notifications in `notifications.show` function, `4000` by defualt */\n  autoClose?: number | false;\n\n  /** Notification transition duration in ms, `250` by default */\n  transitionDuration?: number;\n\n  /** Notification width, cannot exceed 100%, `440` by default */\n  containerWidth?: number | string;\n\n  /** Notification `max-height`, used for transitions, `200` by default */\n  notificationMaxHeight?: number | string;\n\n  /** Maximum number of notifications displayed at a time, other new notifications will be added to queue, `5` by default */\n  limit?: number;\n\n  /** Notifications container z-index, `400` by default */\n  zIndex?: string | number;\n\n  /** Props passed down to the `Portal` component */\n  portalProps?: Omit<PortalProps, 'children'>;\n\n  /** Store for notifications state, can be used to create multiple instances of notifications system in your application */\n  store?: NotificationsStore;\n\n  /** Determines whether notifications container should be rendered inside `Portal`, `true` by default */\n  withinPortal?: boolean;\n}\n\nexport type NotificationsFactory = Factory<{\n  props: NotificationsProps;\n  ref: HTMLDivElement;\n  stylesNames: NotificationsStylesNames;\n  vars: NotificationsCssVariables;\n  staticComponents: {\n    show: typeof notifications.show;\n    hide: typeof notifications.hide;\n    update: typeof notifications.update;\n    clean: typeof notifications.clean;\n    cleanQueue: typeof notifications.cleanQueue;\n    updateState: typeof notifications.updateState;\n  };\n}>;\n\nconst defaultProps: Partial<NotificationsProps> = {\n  position: 'bottom-right',\n  autoClose: 4000,\n  transitionDuration: 250,\n  containerWidth: 440,\n  notificationMaxHeight: 200,\n  limit: 5,\n  zIndex: getDefaultZIndex('overlay'),\n  store: notificationsStore,\n  withinPortal: true,\n};\n\nconst varsResolver = createVarsResolver<NotificationsFactory>(\n  (_, { zIndex, position, containerWidth }) => {\n    const [vertical, horizontal] = position!.split('-');\n\n    return {\n      root: {\n        '--notifications-z-index': zIndex?.toString(),\n        '--notifications-top': vertical === 'top' ? 'var(--mantine-spacing-md)' : undefined,\n        '--notifications-bottom': vertical === 'bottom' ? 'var(--mantine-spacing-md)' : undefined,\n        '--notifications-left':\n          horizontal === 'left'\n            ? 'var(--mantine-spacing-md)'\n            : horizontal === 'center'\n              ? '50%'\n              : undefined,\n        '--notifications-right': horizontal === 'right' ? 'var(--mantine-spacing-md)' : undefined,\n        '--notifications-transform': horizontal === 'center' ? 'translateX(-50%)' : undefined,\n        '--notifications-container-width': rem(containerWidth),\n      },\n    };\n  }\n);\n\nexport const Notifications = factory<NotificationsFactory>((_props, ref) => {\n  const props = useProps('Notifications', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    position,\n    autoClose,\n    transitionDuration,\n    containerWidth,\n    notificationMaxHeight,\n    limit,\n    zIndex,\n    store,\n    portalProps,\n    withinPortal,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n  const data = useNotifications(store);\n  const forceUpdate = useForceUpdate();\n  const shouldReduceMotion = useReducedMotion();\n  const refs = useRef<Record<string, HTMLDivElement>>({});\n  const previousLength = useRef<number>(0);\n\n  const reduceMotion = theme.respectReducedMotion ? shouldReduceMotion : false;\n  const duration = reduceMotion ? 1 : transitionDuration;\n\n  const getStyles = useStyles<NotificationsFactory>({\n    name: 'Notifications',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  useEffect(() => {\n    store?.updateState((current) => ({ ...current, limit: limit || 5 }));\n  }, [limit]);\n\n  useDidUpdate(() => {\n    if (data.notifications.length > previousLength.current) {\n      setTimeout(() => forceUpdate(), 0);\n    }\n    previousLength.current = data.notifications.length;\n  }, [data.notifications]);\n\n  const items = data.notifications.map(({ style: notificationStyle, ...notification }) => (\n    <Transition\n      key={notification.id}\n      timeout={duration}\n      onEnter={() => refs.current[notification.id!].offsetHeight}\n      nodeRef={{ current: refs.current[notification.id!] }}\n    >\n      {(state: TransitionStatus) => (\n        <NotificationContainer\n          ref={(node) => {\n            refs.current[notification.id!] = node!;\n          }}\n          data={notification}\n          onHide={(id) => hideNotification(id, store)}\n          autoClose={autoClose!}\n          {...getStyles('notification', {\n            style: {\n              ...getNotificationStateStyles({\n                state,\n                position,\n                transitionDuration: duration!,\n                maxHeight: notificationMaxHeight!,\n              }),\n              ...notificationStyle,\n            },\n          })}\n        />\n      )}\n    </Transition>\n  ));\n\n  return (\n    <OptionalPortal withinPortal={withinPortal} {...portalProps}>\n      <Box {...getStyles('root')} ref={ref} {...others}>\n        <TransitionGroup>{items}</TransitionGroup>\n      </Box>\n    </OptionalPortal>\n  );\n});\n\nNotifications.classes = classes;\nNotifications.displayName = '@mantine/notifications/Notifications';\nNotifications.show = notifications.show;\nNotifications.hide = notifications.hide;\nNotifications.update = notifications.update;\nNotifications.clean = notifications.clean;\nNotifications.cleanQueue = notifications.cleanQueue;\nNotifications.updateState = notifications.updateState;\n"],
  "mappings": "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",
  "names": ["React", "_Transition", "React"]
}
