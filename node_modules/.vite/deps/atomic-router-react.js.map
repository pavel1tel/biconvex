{
  "version": 3,
  "sources": ["../../atomic-router-react/node_modules/.pnpm/clsx@1.2.1/node_modules/clsx/dist/clsx.m.js", "../../atomic-router-react/src/router-provider.tsx", "../../atomic-router-react/src/link.tsx", "../../atomic-router-react/src/use-is-opened.tsx", "../../atomic-router-react/src/route.tsx", "../../atomic-router-react/src/create-route-view.tsx", "../../atomic-router-react/src/create-routes-view.tsx", "../../atomic-router-react/src/use-link.ts"],
  "sourcesContent": ["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;", "import { createHistoryRouter } from \"atomic-router\";\nimport React, { createContext, ReactNode, useContext } from \"react\";\n\ntype Router = ReturnType<typeof createHistoryRouter>;\n\nexport const RouterContext = createContext<Router | null>(null);\n\nexport function RouterProvider({ router, children }: { router: Router; children: ReactNode }) {\n  return <RouterContext.Provider value={router}>{children}</RouterContext.Provider>;\n}\n\nexport function useRouter() {\n  return useContext(RouterContext) as Router;\n}\n", "import clsx from \"clsx\";\nimport { useUnit } from \"effector-react\";\nimport { buildPath, RouteParams, RouteQuery, RouteInstance } from \"atomic-router\";\nimport React, { AnchorHTMLAttributes, ForwardedRef, forwardRef } from \"react\";\n\nimport { useRouter } from \"./router-provider\";\n\nexport type LinkProps<Params extends RouteParams> = {\n  to: RouteInstance<Params> | string;\n  params?: Params;\n  query?: RouteQuery;\n  className?: string;\n  activeClassName?: string;\n  inactiveClassName?: string;\n} & AnchorHTMLAttributes<HTMLAnchorElement>;\n\nconst LinkView = <Params extends RouteParams>(\n  props: LinkProps<Params>,\n  ref: ForwardedRef<HTMLAnchorElement>\n) => {\n  const { to, params, query, activeClassName, inactiveClassName, ...linkProps } = props;\n  if (typeof props.to === \"string\") {\n    return (\n      <NormalLink ref={ref} href={props.to} {...linkProps} className={clsx(props.className)} />\n    );\n  }\n  // @ts-expect-error\n  return <RouteLink ref={ref} {...props} />;\n};\n\nconst NormalLink = forwardRef<HTMLAnchorElement, AnchorHTMLAttributes<HTMLAnchorElement>>(\n  (props, ref) => {\n    return <a ref={ref} className={props.className} {...props} />;\n  }\n);\n\nconst RouteLinkView = <Params extends RouteParams>(\n  props: Exclude<LinkProps<Params>, \"to\"> & { to: RouteInstance<Params> },\n  ref: ForwardedRef<HTMLAnchorElement>\n) => {\n  const {\n    to,\n    params,\n    query,\n    className,\n    activeClassName,\n    inactiveClassName,\n    onClick,\n    children,\n    target,\n    ...linkProps\n  } = props;\n\n  const router = useRouter();\n  const routeObj = router.routes.find((routeObj) => routeObj.route === to);\n\n  if (!routeObj) {\n    throw new Error(\"[RouteLink] Route not found\");\n  }\n\n  const [isOpened, navigate] = useUnit([routeObj.route.$isOpened, to.navigate]);\n\n  const href = buildPath({\n    pathCreator: routeObj.path,\n    params: params || {},\n    query: query || {},\n  });\n\n  return (\n    <a\n      ref={ref}\n      href={href}\n      {...linkProps}\n      className={clsx(className, isOpened ? activeClassName : inactiveClassName)}\n      target={target}\n      onClick={(evt) => {\n        if (onClick) {\n          onClick(evt);\n        }\n\n        // allow user to prevent navigation\n        if (evt.defaultPrevented) {\n          return;\n        }\n\n        // let browser handle \"_blank\" target and etc\n        if (target && target !== \"_self\") {\n          return;\n        }\n\n        // skip modified events (like cmd + click to open the link in new tab)\n        if (evt.metaKey || evt.altKey || evt.ctrlKey || evt.shiftKey) {\n          return;\n        }\n\n        evt.preventDefault();\n        navigate({\n          params: params || ({} as Params),\n          query: query || {},\n        });\n      }}\n    >\n      {children}\n    </a>\n  );\n};\n\nconst RouteLink = forwardRef(RouteLinkView);\n\nexport const Link = forwardRef(LinkView) as <Params extends RouteParams>(\n  props: LinkProps<Params> & { ref?: ForwardedRef<HTMLAnchorElement> }\n) => ReturnType<typeof LinkView>;\n", "import { useUnit } from \"effector-react\";\nimport { RouteInstance } from \"atomic-router\";\n\nexport function useIsOpened(route: RouteInstance<any> | RouteInstance<any>[]) {\n  return Array.isArray(route)\n    ? useUnit(route.map((route) => route.$isOpened)).some(Boolean)\n    : useUnit(route.$isOpened);\n}\n", "import React from \"react\";\nimport { RouteInstance, RouteParams } from \"atomic-router\";\n\nimport { useIsOpened } from \"./use-is-opened\";\n\ninterface Props<Params extends RouteParams> {\n  route: RouteInstance<Params> | RouteInstance<Params>[];\n  view: React.ComponentType;\n}\n\nexport function Route<Params extends RouteParams>({ route, view: Component }: Props<Params>) {\n  const isOpened = useIsOpened(route);\n\n  if (isOpened) {\n    return <Component />;\n  }\n\n  return null;\n}\n", "import React from \"react\";\nimport { RouteInstance, RouteParams } from \"atomic-router\";\n\nimport { useIsOpened } from \"./use-is-opened\";\n\nexport interface RouteViewConfig<Props, Params extends RouteParams> {\n  route: RouteInstance<Params> | RouteInstance<Params>[];\n  view: React.ComponentType<Props>;\n  otherwise?: React.ComponentType<Props>;\n}\n\nexport function createRouteView<\n  Props,\n  Params extends RouteParams,\n  Config extends {\n    [key in keyof RouteViewConfig<Props, Params>]?: RouteViewConfig<Props, Params>[key];\n  }\n>(config: Config) {\n  return (props: Props & Omit<RouteViewConfig<Props, Params>, keyof Config>) => {\n    const mergedConfig = { ...config, ...props } as RouteViewConfig<Props, Params>;\n    const isOpened = useIsOpened(mergedConfig.route);\n\n    if (isOpened) {\n      const View = mergedConfig.view;\n\n      return <View {...props} />;\n    }\n\n    if (mergedConfig.otherwise) {\n      const Otherwise = mergedConfig.otherwise;\n\n      return <Otherwise {...props} />;\n    }\n\n    return null;\n  };\n}\n", "import React, { FC, ReactNode } from \"react\";\nimport { RouteInstance, RouteParams } from \"atomic-router\";\n\nimport { useIsOpened } from \"./use-is-opened\";\n\nexport interface RouteRecord<Props, Params extends RouteParams> {\n  route: RouteInstance<Params> | RouteInstance<Params>[];\n  view: React.ComponentType<Props>;\n  layout?: FC<{ children: ReactNode }>;\n}\n\nexport interface RoutesViewConfig {\n  routes: RouteRecord<any, any>[];\n  otherwise?: React.ComponentType<any>;\n}\n\nexport function createRoutesView<Config extends RoutesViewConfig>(config: Config) {\n  return (props: Omit<Config, keyof Config>) => {\n    const mergedConfig = { ...config, ...props };\n    const routes = mergedConfig.routes.map((routeRecord) => {\n      const isOpened = useIsOpened(routeRecord.route);\n      return { ...routeRecord, isOpened };\n    });\n\n    for (const route of routes) {\n      if (route.isOpened) {\n        const View = route.view;\n\n        if (route.layout) {\n          const Layout = route.layout;\n          return (\n            <Layout>\n              <View />\n            </Layout>\n          );\n        }\n\n        return <View />;\n      }\n    }\n\n    if (mergedConfig.otherwise) {\n      const Otherwise = mergedConfig.otherwise;\n\n      return <Otherwise />;\n    }\n\n    return null;\n  };\n}\n", "import { buildPath, RouteInstance, RouteParams, RouteQuery } from \"atomic-router\";\n\nimport { useRouter } from \"./router-provider\";\n\nexport function useLink<Params extends RouteParams>(\n  route: RouteInstance<Params>,\n  params: Params,\n  query: RouteQuery = {}\n): string {\n  const router = useRouter();\n  const routeObj = router.routes.find((routeObj) => routeObj.route === route);\n\n  if (!routeObj) {\n    throw new Error(`[useLink] Route not found. Maybe it is not passed into createHistoryRouter`);\n  }\n\n  return buildPath({\n    pathCreator: routeObj.path,\n    params: params,\n    query: query,\n  });\n}\n"],
  "mappings": "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",
  "names": ["RouterContext", "createContext", "RouterProvider", "router", "children", "_jsx", "useRouter", "useContext", "LinkView", "props", "ref", "to", "params", "query", "activeClassName", "inactiveClassName", "linkProps", "_objectSpread", "clsx", "className", "NormalLink", "forwardRef", "RouteLinkView", "onClick", "target", "routeObj", "routes", "find", "route", "Error", "useUnit", "$isOpened", "navigate", "isOpened", "href", "_withFactory", "buildPath", "pathCreator", "path", "evt", "defaultPrevented", "metaKey", "altKey", "ctrlKey", "shiftKey", "preventDefault", "RouteLink", "Link", "useIsOpened", "Array", "isArray", "map", "some", "Boolean", "Route", "Component", "view", "createRouteView", "config", "mergedConfig", "View", "otherwise", "Otherwise", "createRoutesView", "routeRecord", "layout", "Layout", "useLink"]
}
