import * as atomic_router from 'atomic-router';
import { RouteParams, RouteInstance, RouteQuery, createHistoryRouter } from 'atomic-router';
import React, { AnchorHTMLAttributes, ForwardedRef, ReactNode, FC } from 'react';
import * as history from 'history';
import * as effector from 'effector';

declare type LinkProps<Params extends RouteParams> = {
    to: RouteInstance<Params> | string;
    params?: Params;
    query?: RouteQuery;
    className?: string;
    activeClassName?: string;
    inactiveClassName?: string;
} & AnchorHTMLAttributes<HTMLAnchorElement>;
declare const LinkView: <Params extends RouteParams>(props: LinkProps<Params>, ref: ForwardedRef<HTMLAnchorElement>) => JSX.Element;
declare const Link: <Params extends RouteParams>(props: {
    to: string | RouteInstance<Params>;
    params?: Params | undefined;
    query?: RouteQuery | undefined;
    className?: string | undefined;
    activeClassName?: string | undefined;
    inactiveClassName?: string | undefined;
} & React.AnchorHTMLAttributes<HTMLAnchorElement> & {
    ref?: React.ForwardedRef<HTMLAnchorElement> | undefined;
}) => ReturnType<typeof LinkView>;

interface Props<Params extends RouteParams> {
    route: RouteInstance<Params> | RouteInstance<Params>[];
    view: React.ComponentType;
}
declare function Route<Params extends RouteParams>({ route, view: Component }: Props<Params>): JSX.Element | null;

declare type Router = ReturnType<typeof createHistoryRouter>;
declare const RouterContext: React.Context<{
    $path: effector.StoreWritable<string>;
    $activeRoutes: effector.StoreWritable<atomic_router.RouteInstance<any>[]>;
    $history: effector.StoreWritable<history.History>;
    setHistory: effector.EventCallable<history.History>;
    $query: effector.StoreWritable<atomic_router.RouteQuery>;
    back: effector.EventCallable<void>;
    forward: effector.EventCallable<void>;
    push: effector.Effect<Omit<atomic_router.HistoryPushParams, "history">, atomic_router.HistoryPushParams, Error>;
    routes: atomic_router.RouteObject<any>[];
    initialized: effector.EventCallable<{
        activeRoutes: atomic_router.RouteInstance<any>[];
        path: string;
        query: atomic_router.RouteQuery;
    }>;
    routeNotFound: effector.EventCallable<void>;
} | null>;
declare function RouterProvider({ router, children }: {
    router: Router;
    children: ReactNode;
}): JSX.Element;
declare function useRouter(): {
    $path: effector.StoreWritable<string>;
    $activeRoutes: effector.StoreWritable<atomic_router.RouteInstance<any>[]>;
    $history: effector.StoreWritable<history.History>;
    setHistory: effector.EventCallable<history.History>;
    $query: effector.StoreWritable<atomic_router.RouteQuery>;
    back: effector.EventCallable<void>;
    forward: effector.EventCallable<void>;
    push: effector.Effect<Omit<atomic_router.HistoryPushParams, "history">, atomic_router.HistoryPushParams, Error>;
    routes: atomic_router.RouteObject<any>[];
    initialized: effector.EventCallable<{
        activeRoutes: atomic_router.RouteInstance<any>[];
        path: string;
        query: atomic_router.RouteQuery;
    }>;
    routeNotFound: effector.EventCallable<void>;
};

interface RouteViewConfig<Props, Params extends RouteParams> {
    route: RouteInstance<Params> | RouteInstance<Params>[];
    view: React.ComponentType<Props>;
    otherwise?: React.ComponentType<Props>;
}
declare function createRouteView<Props, Params extends RouteParams, Config extends {
    [key in keyof RouteViewConfig<Props, Params>]?: RouteViewConfig<Props, Params>[key];
}>(config: Config): (props: Props & Omit<RouteViewConfig<Props, Params>, keyof Config>) => JSX.Element | null;

interface RouteRecord<Props, Params extends RouteParams> {
    route: RouteInstance<Params> | RouteInstance<Params>[];
    view: React.ComponentType<Props>;
    layout?: FC<{
        children: ReactNode;
    }>;
}
interface RoutesViewConfig {
    routes: RouteRecord<any, any>[];
    otherwise?: React.ComponentType<any>;
}
declare function createRoutesView<Config extends RoutesViewConfig>(config: Config): (props: Omit<Config, keyof Config>) => JSX.Element | null;

declare function useLink<Params extends RouteParams>(route: RouteInstance<Params>, params: Params, query?: RouteQuery): string;

export { Link, LinkProps, Route, RouteRecord, RouteViewConfig, RouterContext, RouterProvider, RoutesViewConfig, createRouteView, createRoutesView, useLink, useRouter };
